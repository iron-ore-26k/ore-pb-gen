// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service.proto

package ore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OreServiceClient is the client API for OreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OreServiceClient interface {
	PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (*PlaySongResponse, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
}

type oreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOreServiceClient(cc grpc.ClientConnInterface) OreServiceClient {
	return &oreServiceClient{cc}
}

func (c *oreServiceClient) PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (*PlaySongResponse, error) {
	out := new(PlaySongResponse)
	err := c.cc.Invoke(ctx, "/ore.OreService/PlaySong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oreServiceClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/ore.OreService/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OreServiceServer is the server API for OreService service.
// All implementations must embed UnimplementedOreServiceServer
// for forward compatibility
type OreServiceServer interface {
	PlaySong(context.Context, *PlaySongRequest) (*PlaySongResponse, error)
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	mustEmbedUnimplementedOreServiceServer()
}

// UnimplementedOreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOreServiceServer struct {
}

func (UnimplementedOreServiceServer) PlaySong(context.Context, *PlaySongRequest) (*PlaySongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedOreServiceServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedOreServiceServer) mustEmbedUnimplementedOreServiceServer() {}

// UnsafeOreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OreServiceServer will
// result in compilation errors.
type UnsafeOreServiceServer interface {
	mustEmbedUnimplementedOreServiceServer()
}

func RegisterOreServiceServer(s grpc.ServiceRegistrar, srv OreServiceServer) {
	s.RegisterService(&OreService_ServiceDesc, srv)
}

func _OreService_PlaySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaySongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OreServiceServer).PlaySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ore.OreService/PlaySong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OreServiceServer).PlaySong(ctx, req.(*PlaySongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OreService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OreServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ore.OreService/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OreServiceServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OreService_ServiceDesc is the grpc.ServiceDesc for OreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ore.OreService",
	HandlerType: (*OreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaySong",
			Handler:    _OreService_PlaySong_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _OreService_Pause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
